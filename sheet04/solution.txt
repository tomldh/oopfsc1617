Exercise 2:
When the list is deleted, the respective destructor for the member attributes will be called.
With reference to the code, when head shared_ptr is going to be destroyed, if the node which head points to has no other shared_ptr pointing to it, it is going to be destroyed.
When that node is being destroyed, the next shared_ptr in the node will be destroyed which might lead to deletion of the underlying node. 
Such process continues until the end node of the list. Here we assume the above mentioned shared_ptr is the only pointer pointing to the node. 
The control is then returned to the previous destructor of the node until the destructor of the head shared_ptr in the list.
Next, the tail shared_ptr will be destroyed and the node that it points to will be deleted.

When each element is pointing to its predecessor, the nodes are then pointed to each other due to "next" and "prev". 
Thus, when the list is being destroyed, due to the node having one pointer in the cirle pointing to it, the node will not be destroyed even when list go out of scope.
To break such circle, the predecessor pointer should be a weak_ptr which does not affect the release of the node memory but still can be used to point to what the shared_ptr points to. 

Exercise 4:


int foo ( const int& );
int bar ( int& );

int main()
{
	int i = 0; //ok
	int& j = i; //ok
	static const int f = i; //ok
	int* const p = 0; //ok
	p = &i; //not allowed, because p is a constant pointer, the address held by p cannot be changed.
	*p = f; //allowed, but undefined result. Program might crash.
	const int& l = j; //ok
	const int& k = f; //ok
	foo ( j ); //ok
	bar ( l ); //not allowed, cannot bind a plain reference to l (reference to const)
	foo ( k ); //ok
}
